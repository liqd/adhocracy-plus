name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Setup Postgres
        env:
          PGPASSWORD: postgres
          PGHOSTADDR: 127.0.0.1
        run: |
          psql -c 'create database django;' -U postgres
          psql -c 'create database django_test;' -U postgres
      - name: Cache Bun packages
        uses: actions/cache@v4
        env:
          cache-name: cache-bun-packages
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache uv packages
        uses: actions/cache@v4
        env:
          cache-name: cache-uv-packages
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache testmon data
        id: cache-testmon
        uses: actions/cache@v4
        with:
          path: .testmondata
          key: ${{ runner.os }}-testmon-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-testmon-${{ steps.setup-python.outputs.python-version }}-

      - name: Show testmon cache status
        run: |
          echo "testmon cache hit: ${{ steps.cache-testmon.outputs.cache-hit }}"
          ls -la .testmondata || true
      - name: check a4 hashes equal
        run: |
          ./scripts/a4-check.sh

      - name: Install OS Dependencies (cached)
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: gdal-bin libsqlite3-mod-spatialite libblas3
          execute_install_scripts: true
          version: 1.0

      - name: Update dynamic linker cache
        run: sudo ldconfig

      - name: Install Bun Dependencies
        run: |
          # Installiere Git-Dependencies mit npm (Bun-Fallback)
          npm install --package-lock-only --ignore-scripts
          bun install
          bun run build

      - name: Install Python Dependencies
        run: |
          ~/.local/bin/uv pip install -r requirements/dev.txt --system
          ~/.local/bin/uv pip install coveralls --system
      - name: Run Tests
        env:
          PGPASSWORD: postgres
          PGHOSTADDR: 127.0.0.1
        run: |
          python manage.py collectstatic > /dev/null
          DJANGO_SETTINGS_MODULE='adhocracy-plus.config.settings.travis' py.test --testmon --cov
          isort --diff -c adhocracy-plus tests
          python manage.py makemigrations --dry-run --check --noinput
          flake8 adhocracy-plus tests --exclude migrations,settings
      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.COV }}
        run: |
          coveralls
      - name: Run Frontend Tests
        run: |
          npm test
          npm run lint
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        env:
          TRAVIS_SSH_SECRET: ${{ secrets.DEPLOY }}
        run: |
          ./scripts/deploy.sh
